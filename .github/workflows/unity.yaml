name: Ninsar CI

on:
  push:
    branches: [main]
    tags-ignore: ["v*"]
  pull_request:
    branches: [main]
  create:
    tags: ["v*"]
    branches: [main]

jobs:

  # uncomment to run tests
  # test:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform: [Android, iOS]
      
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         lfs: true
  #         submodules: 'recursive'

  #     - name: Cache Library
  #       uses: actions/cache@v2
  #       with:
  #         path: Library
  #         key: Library-${{ matrix.platform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
  #         restore-keys: |
  #           Library-${{ matrix.platform }}
  #           Library-
      
  #     - name: Run Tests
  #       uses: game-ci/unity-test-runner@v2
  #       env:
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #         UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
  #       with:
  #         githubToken: ${{ secrets.GITHUB_TOKEN }}

      
  build:
    if: startsWith(github.ref, 'refs/tags/v') # To run only on Tags 
    # needs: test # uncomment if run tests
    strategy:
      fail-fast: true
      matrix:
        platform: [Android, iOS]
        build-aab: [true]
        sign: [false]
    
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: 'recursive'

      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.platform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.platform }}
            Library-

      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.platform }}
          buildsPath: Builds
          buildName: ${{ matrix.platform }}
          versioning: Tag
          androidAppBundle: false
          androidKeystoreName: ${{ matrix.sign && 'user.keystore' || '' }}
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}

      - name: Build .aab if Android and aab build is enabled
        if: matrix.platform == 'Android' && matrix.build-aab
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.platform }}
          buildsPath: Builds
          versioning: Tag
          androidAppBundle: true
          androidKeystoreName: ${{ matrix.sign && 'user.keystore' || '' }}
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}

      - name: Upload Builds
        uses: actions/upload-artifact@v2
        with:
          name: Build-${{matrix.platform}}
          path: Builds/${{matrix.platform}}
          retention-days: 1

  build-ios:
    if: startsWith(github.ref, 'refs/tags/v') # To run only on Tags 
    needs: build
    strategy:
      fail-fast: false
      matrix:
        platform: [Android, iOS]
        build-aab: [true]
        sign: [false]
    
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        if: matrix.platform == 'iOS' # run only on iOS, to enable copy-pasted matrix
        with:
          lfs: true
          submodules: 'recursive'

      - name: Download iOS Artifact
        if: matrix.platform == 'iOS' # run only on iOS, to enable copy-pasted matrix
        uses: actions/download-artifact@v2
        with:
          name: Build-iOS
          path: Builds/iOS

      - name: Fix File Permissions
        if: matrix.platform == 'iOS' # run only on iOS, to enable copy-pasted matrix
        run: |
          find ${{ format('{0}/Builds/iOS', github.workspace) }} -type f -name "**.sh" -exec chmod +x {} \;

      - name: Build Xcode project
        if: matrix.platform == 'iOS' # run only on iOS, to enable copy-pasted matrix
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          MATCH_URL: ${{ secrets.MATCH_URL }}
          MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}
          IOS_APP_ID: com.company.application # Change it to match your unity bundle id
          IOS_BUILD_PATH: ${{ format('{0}/Builds/iOS', github.workspace) }}
          PROJECT_NAME: Your Project Name
          # USE_PODS: true # Uncomment to use cocoapods
        run:
          bundle install
          bundle exec fastlane ios beta

      - name: Upload .ipa
        if: matrix.platform == 'iOS'
        uses: actions/upload-artifact@v2
        with:
          name: Build-iOS
          path: Builds/iOS
          retention-days: 1

  
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, build-ios]
    runs-on: ubuntu-latest

    steps:
      - name: Download all builds
        uses: actions/download-artifact@v2
        with:
          path: Builds/
          
      - name: Archive all builds
        run: find Builds -maxdepth 1 -mindepth 1 -type d -exec tar -czvf {}.tar.gz {} \;

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          fail_on_unmatched_files: false
          files: |
            Builds/**/*.apk
            Builds/**/*.ipa
            Builds/*.tar.gz


      # - name: Publish

      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          failOnError: false
          name: |
            Build-StandaloneOSX
            Build-StandaloneWindows
            Build-StandaloneWindows64
            Build-StandaloneLinux64
            Build-iOS
            Build-Android
            Build-WebGL