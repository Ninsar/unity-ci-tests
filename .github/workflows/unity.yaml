name: Ninsar CI

on:
  push:
    branches: [main]
    tags-ignore: ["v*"]
  pull_request:
    branches: [main]
  create:
    tags: ["v*"]
    branches: [main]

jobs:

  test:
    strategy:
      fail-fast: false
      matrix:
        platform: [Android, iOS]
        solution: ['./${{ github.event.repository.name }}.sln']
      
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: 'recursive'

      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.platform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.platform }}
            Library-
      
      - name: Run Tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      
  build:
    if: github.ref != 'refs/heads/main' # To run only on PRs & Tags
    needs: test
    strategy:
      fail-fast: true
      matrix:
        platform: [Android, iOS]
        build-aab: [true]
        sign: [false]
    
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: 'recursive'

      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.platform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.platform }}
            Library-

      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.platform }}
          buildsPath: Builds
          buildName: ${{ matrix.platform }}
          versioning: Tag
          androidAppBundle: false
          androidKeystoreName: ${{ matrix.sign && 'user.keystore' || '' }}
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}

      - name: Build .aab if Android and aab build is enabled
        if: matrix.platform == 'Android' && matrix.build-aab
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.platform }}
          buildsPath: Builds
          versioning: Tag
          androidAppBundle: true
          androidKeystoreName: ${{ matrix.sign && 'user.keystore' || '' }}
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}

      - name: Upload Builds
        uses: actions/upload-artifact@v2
        with:
          name: Build-${{matrix.platform}}
          path: Builds/${{matrix.platform}}
          retention-days: 1

  build-ios:
    if: github.ref != 'refs/heads/main' # To run only on PRs & Tags 
    needs: build
    strategy:
      fail-fast: false
      matrix:
        platform: [Android, iOS]
        build-aab: [true]
        sign: [false]
    
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        if: matrix.platform == 'iOS' # run only on iOS, to enable copy-pasted matrix
        with:
          lfs: true
          submodules: 'recursive'

      - name: Download iOS Artifact
        if: matrix.platform == 'iOS' # run only on iOS, to enable copy-pasted matrix
        uses: actions/download-artifact@v2
        with:
          name: Build-iOS
          path: Builds/iOS

      - name: Fix File Permissions
        if: matrix.platform == 'iOS' # run only on iOS, to enable copy-pasted matrix
        run: |
          find ${{ format('{0}/Builds/iOS', github.workspace) }} -type f -name "**.sh" -exec chmod +x {} \;

      - name: Build Xcode project
        if: matrix.platform == 'iOS' # run only on iOS, to enable copy-pasted matrix
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          MATCH_URL: ${{ secrets.MATCH_URL }}
          MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}
          IOS_APP_ID: com.company.application # Change it to match your unity bundle id
          IOS_BUILD_PATH: ${{ format('{0}/Builds/iOS', github.workspace) }}
          PROJECT_NAME: Your Project Name
        run:
          echo "Build .ipa" > Builds/iOS/iOS.ipa
          echo "Build to appstore"

      - name: Upload .ipa
        if: matrix.platform == 'iOS'
        uses: actions/upload-artifact@v2
        with:
          name: Build-iOS
          path: Builds/iOS
          retention-days: 1

  
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, build-ios]
    runs-on: ubuntu-latest

    steps:
      - name: Download build for StandaloneOSX
        uses: actions/download-artifact@v2
        with:
          name: Build-StandaloneOSX
          path: Builds/StandaloneOSX

      - name: Download build for StandaloneWindows
        uses: actions/download-artifact@v2
        with:
          name: Build-StandaloneWindows
          path: Builds/StandaloneWindows

      - name: Download build for StandaloneWindows64
        uses: actions/download-artifact@v2
        with:
          name: Build-StandaloneWindows64
          path: Builds/StandaloneWindows64

      - name: Download build for StandaloneLinux64
        uses: actions/download-artifact@v2
        with:
          name: Build-StandaloneLinux64
          path: Builds/StandaloneLinux64

      - name: Download build for iOS
        uses: actions/download-artifact@v2
        with:
          name: Build-iOS
          path: Builds/iOS

      - name: Download build for Android
        uses: actions/download-artifact@v2
        with:
          name: Build-Android
          path: Builds/Android

      - name: Download build for WebGL
        uses: actions/download-artifact@v2
        with:
          name: Build-WebGL
          path: Builds/WebGL
          
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            Builds/StandaloneOSX
            Builds/StandaloneWindows
            Builds/StandaloneWindows64
            Builds/StandaloneLinux64
            Builds/iOS
            Builds/Android
            Builds/WebGL

      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          failOnError: false
          name: |
            Build-StandaloneOSX
            Build-StandaloneWindows
            Build-StandaloneWindows64
            Build-StandaloneLinux64
            Build-iOS
            Build-Android
            Build-WebGL